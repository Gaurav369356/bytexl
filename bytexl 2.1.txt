<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SVG Drawing Canvas</title>
    <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: #f4f4f4;
            margin: 0;
        }
        .container {
            width: 90%;
            max-width: 800px;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
        }
        .drawing-canvas {
            border: 2px solid #333;
            background-color: #e9e9e9;
            cursor: crosshair;
            width: 100%;
            height: 500px;
        }
        p {
            margin-top: 15px;
            text-align: center;
            color: #555;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Simple SVG Drawing Tool</h1>
        <svg id="drawing-canvas" class="drawing-canvas"></svg>
        <p>Click and drag inside the canvas to draw a line. Release to finish the shape. You can draw multiple shapes.</p>
    </div>

    <script>
        const canvas = document.getElementById('drawing-canvas');
        let isDrawing = false;
        let currentLine = null;
        let startX, startY;

        // Function to handle the start of drawing (on mousedown)
        canvas.addEventListener('mousedown', (event) => {
            isDrawing = true;
            
            // Get the coordinates relative to the SVG canvas
            const rect = canvas.getBoundingClientRect();
            startX = event.clientX - rect.left;
            startY = event.clientY - rect.top;

            // Create a new SVG line element
            currentLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            currentLine.setAttribute('x1', startX);
            currentLine.setAttribute('y1', startY);
            currentLine.setAttribute('x2', startX); // Start with x2 and y2 at the same position
            currentLine.setAttribute('y2', startY);
            currentLine.setAttribute('stroke', '#007bff');
            currentLine.setAttribute('stroke-width', '4');

            // Append the new line to the SVG canvas
            canvas.appendChild(currentLine);
        });

        // Function to handle the drawing motion (on mousemove)
        canvas.addEventListener('mousemove', (event) => {
            if (!isDrawing) return; // Do nothing if not drawing

            // Get the current mouse coordinates
            const rect = canvas.getBoundingClientRect();
            const currentX = event.clientX - rect.left;
            const currentY = event.clientY - rect.top;

            // Update the x2 and y2 attributes of the current line
            currentLine.setAttribute('x2', currentX);
            currentLine.setAttribute('y2', currentY);
        });

        // Function to handle the end of drawing (on mouseup)
        canvas.addEventListener('mouseup', () => {
            isDrawing = false;
            currentLine = null; // Reset the current line to allow new ones to be drawn
        });

        // Also handle mouseleave to stop drawing if the cursor leaves the canvas
        canvas.addEventListener('mouseleave', () => {
            isDrawing = false;
            currentLine = null;
        });
    </script>

</body>
</html>